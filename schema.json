{
  "$schema":"http://json-schema.org/draft-07/schema",
  "definitions":{
    "data":{
      "anyOf":[
        {
          "description":"Evaluates the enclosed GQL string.",
          "title":"GQL",
          "type":"string",
          "pattern":"^GQL\\(.*\\)$",
          "default":"GQL(.node-type)"
        },
        {
          "description":"Returns a display name path from the tree root to this node.",
          "const":"DisplayPath"
        },
        {
          "description":"Returns the display name of this node.",
          "const":"DisplayName"
        },
        {
          "description":"Returns the reference name of this node.",
          "const":"ReferenceName"
        },
        {
          "description":"Returns the location type of this node (Area, Device, Directory, Driver, Equipment, Group, Microblock, MicroblockComponent, Network, Site, System, or null if this node is not a location).",
          "const":"LocationType"
        },
        {
          "description":"Returns whether this node represents a location.",
          "const":"IsLocation"
        },
        {
          "description":"Returns the value of this node.",
          "const":"NodeValue"
        },
        {
          "description":"Aspect that indicates a source of alarms. This can be an intrinsic alarm or an alarm microblock, the only requirement is that alarms can be generated by it.",
          "const":"AlarmSource"
        },
        {
          "description":"Represents analog network I/O points.",
          "const":"AnalogNetworkIO"
        },
        {
          "description":"Represents analog network I/O collectors.",
          "const":"AnalogNetworkIOCollector"
        },
        {
          "description":"Aspect that provides methods that are only available for analog trend sources.",
          "const":"AnalogTrendSource"
        },
        {
          "description":"An aspect that is available on all equipment instances which are attached to a device.",
          "const":"AttachedEquipment"
        },
        {
          "description":"An aspect that contains a list of attached BACnet objects.",
          "const":"BACnetObjectSource"
        },
        {
          "description":"Represents binary network I/O points.",
          "const":"BinaryNetworkIO"
        },
        {
          "description":"Aspect for retrieving device specific information.",
          "const":"Device"
        },
        {
          "description":"Aspect that provides methods that are only available for digital trend sources.",
          "const":"DigitalTrendSource"
        },
        {
          "description":"Aspect for retrieving driver specific information.",
          "const":"Driver"
        },
        {
          "description":"Aspect that provides methods that are only available for equipment color trend sources.",
          "const":"EquipmentColorTrendSource"
        },
        {
          "description":"Aspect that represents a grouping of locations.",
          "const":"Group"
        },
        {
          "description":"Aspect representing a value that can be locked. Locking a value, forces the PresentValue of a microblock to a specified value. This typically overrides physical or network inputs or outputs.",
          "const":"Lockable"
        },
        {
          "description":"Supertype of all aspects that are associated with a microblock.",
          "const":"Microblock"
        },
        {
          "description":"Aspect for retrieving modstats.",
          "const":"ModuleStatus"
        },
        {
          "description":"Represents network I/O points. This is a base aspect that can be used when you want all types of network I/O points.",
          "const":"NetworkIO"
        },
        {
          "description":"Aspect that represents a physical point in a hardware device.",
          "const":"PhysicalPoint"
        },
        {
          "description":"Aspect that represents the main value of a microblock.",
          "const":"PresentValue"
        },
        {
          "description":"Aspect that allows access and manipulation of protocol mappings (such as Modbus or LonWorks) in an equipment.",
          "const":"ProtocolMapping"
        },
        {
          "description":"Aspect that indicates an entity that can be scheduled. This includes areas, equipment and schedule groups.",
          "const":"Schedulable"
        },
        {
          "description":"Aspect that represents a set point.",
          "const":"SetPoint"
        },
        {
          "description":"Aspect representing the user adjustable offsets to a setpoint. The adjustable offset is exactly that: the offset from the setpoint. The adjust is often associated with a wall sensor that allows the user (or occupant) to request small changes to their zone's temperature.",
          "const":"SetPointAdjust"
        },
        {
          "description":"Aspect that indicates a source of trend data. This can be a physical point or a wire trend, the only requirement is that trend data can be generated by it.",
          "const":"TrendSource"
        },
        {
          "description":"Returns the reference name of the alarm category used for all alarms generated at this source.",
          "const":"AlarmSource.CategoryReferenceName"
        },
        {
          "description":"Returns true if this alarm source is marked as a potential alarm source.",
          "const":"AlarmSource.IsPotential"
        },
        {
          "description":"Returns the present value of this point.",
          "const":"AnalogNetworkIO.PresentValue"
        },
        {
          "description":"Returns the default value used for network input points when the network value cannot be read.",
          "const":"AnalogNetworkIO.InputDefaultValue"
        },
        {
          "description":"Returns the parameter for COV increment on output points.",
          "const":"AnalogNetworkIO.OutputCOVIncrement"
        },
        {
          "description":"Returns the primary address for this network point.",
          "const":"AnalogNetworkIO.PrimaryAddress"
        },
        {
          "description":"Returns the status of the primary address for this network point.",
          "const":"AnalogNetworkIO.PrimaryStatus"
        },
        {
          "description":"Returns the secondary address for this network point, if it has one.",
          "const":"AnalogNetworkIO.SecondaryAddress"
        },
        {
          "description":"Returns the status of the secondary address for this network point, if it has one.",
          "const":"AnalogNetworkIO.SecondaryStatus"
        },
        {
          "description":"Returns the present value of this point.",
          "const":"AnalogNetworkIOCollector.PresentValue"
        },
        {
          "description":"Returns the default value used for network input points when the network value cannot be read.",
          "const":"AnalogNetworkIOCollector.InputDefaultValue"
        },
        {
          "description":"Either 'average', 'max', 'min', or 'total'.",
          "const":"AnalogNetworkIOCollector.Operation"
        },
        {
          "description":"Returns the units String associated with this trend source.",
          "const":"AnalogTrendSource.Units"
        },
        {
          "description":"Returns the current color (numeric -1 to 15) for this equipment.",
          "const":"AttachedEquipment.Color"
        },
        {
          "description":"Returns the name of the definition of this equipment.",
          "const":"AttachedEquipment.Definition"
        },
        {
          "description":"Returns the current prime value for this equipment.",
          "const":"AttachedEquipment.Prime"
        },
        {
          "description":"Returns the MAC address of this device as a String.",
          "const":"AttachedEquipment.Device.MacAddress"
        },
        {
          "description":"Returns the model name of this device.",
          "const":"AttachedEquipment.Device.ModelName"
        },
        {
          "description":"Returns true if this device has been marked out-of-service.",
          "const":"AttachedEquipment.Device.OutOfService"
        },
        {
          "description":"Returns the present value of this point.",
          "const":"BinaryNetworkIO.PresentValue"
        },
        {
          "description":"Returns the default value used for network input points when the network value cannot be read.",
          "const":"BinaryNetworkIO.InputDefaultValue"
        },
        {
          "description":"Returns the primary address for this network point.",
          "const":"BinaryNetworkIO.PrimaryAddress"
        },
        {
          "description":"Returns the status of the primary address for this network point.",
          "const":"BinaryNetworkIO.PrimaryStatus"
        },
        {
          "description":"Returns the secondary address for this network point, if it has one.",
          "const":"BinaryNetworkIO.SecondaryAddress"
        },
        {
          "description":"Returns the status of the secondary address for this network point, if it has one.",
          "const":"BinaryNetworkIO.SecondaryStatus"
        },
        {
          "description":"Returns the MAC address of this device as a String.",
          "const":"Device.MacAddress"
        },
        {
          "description":"Returns the model name of this device.",
          "const":"Device.ModelName"
        },
        {
          "description":"Returns true if this device has been marked out-of-service.",
          "const":"Device.IsOutOfService"
        },
        {
          "description":"Returns the text name for a true state.",
          "const":"BinaryNameSet.True"
        },
        {
          "description":"Returns the text name for a false state.",
          "const":"BinaryNameSet.False"
        },
        {
          "description":"Returns the name of the driver.",
          "const":"Driver.Name"
        },
        {
          "description":"Returns the version of the driver.",
          "const":"Driver.Version"
        },
        {
          "description":"Returns true if this value is currently locked.",
          "const":"Lockable.IsLockActive"
        },
        {
          "description":"Returns the value that will be used for the lock when it is active.",
          "const":"Lockable.LockedValue"
        },
        {
          "description":"Returns the module status report (modstat).",
          "const":"ModuleStatus.ReportText"
        },
        {
          "description":"Returns true if communications are enabled for this network point.",
          "const":"NetworkIO.IsCommEnabled"
        },
        {
          "description":"Returns the default value used for network input points when the network value cannot be read.",
          "const":"NetworkIO.InputDefaultValue"
        },
        {
          "description":"Returns whether the input is valid.",
          "const":"NetworkIO.IsInputValid"
        },
        {
          "description":"Returns the parameter for enabled COV (change of value) writes on output points.",
          "const":"NetworkIO.IsOutputCOVEnabled"
        },
        {
          "description":"Returns whether the output is enabled.",
          "const":"NetworkIO.IsOutputEnabled"
        },
        {
          "description":"Returns the present value of this point.",
          "const":"NetworkIO.PresentValue"
        },
        {
          "description":"Returns the number of seconds between network data refreshes.",
          "const":"NetworkIO.RefreshTime"
        },
        {
          "description":"Returns whether this is an input (true) or an output (false).",
          "const":"NetworkIO.IsInput"
        },
        {
          "description":"Returns the expander number of this physical point.",
          "const":"PhysicalPoint.Expander"
        },
        {
          "description":"Returns the I/O number of this physical point.",
          "const":"PhysicalPoint.IONumber"
        },
        {
          "description":"Returns true if this physical point has been enabled.",
          "const":"PhysicalPoint.IsEnabled"
        },
        {
          "description":"Returns true if this physical point is an input; false if it is an output.",
          "const":"PhysicalPoint.IsInput"
        },
        {
          "description":"Returns the present value in a way suitable for displaying in a user interface.",
          "const":"PresentValue.DisplayValue"
        },
        {
          "description":"Returns whether the associated equipment contains mappings for the LonWorks protocol.",
          "const":"ProtocolMapping.LonWorks"
        },
        {
          "description":"Returns whether the associated equipment contains mappings for the Modbus protocol.",
          "const":"ProtocolMapping.Modbus"
        },
        {
          "description":"Returns whether the associated equipment contains mappings for the N2 protocol.",
          "const":"ProtocolMapping.N2"
        },
        {
          "description":"Returns the effective cooling setpoint, which is the cooling setpoint currently in use.",
          "const":"SetPoint.EffectiveCooling"
        },
        {
          "description":"Returns the effective heating setpoint, which is the heating setpoint currently in use.",
          "const":"SetPoint.EffectiveHeating"
        },
        {
          "description":"Returns the occupied cooling setpoint.",
          "const":"SetPoint.OccupiedCooling"
        },
        {
          "description":"Returns the occupied heating setpoint.",
          "const":"SetPoint.OccupiedHeating"
        },
        {
          "description":"Returns the unoccupied cooling setpoint.",
          "const":"SetPoint.UnoccupiedCooling"
        },
        {
          "description":"Returns the unoccupied heating setpoint.",
          "const":"SetPoint.UnoccupiedHeating"
        },
        {
          "description":"Returns the zone temp used by the setpoint.",
          "const":"SetPoint.ZoneTemp"
        },
        {
          "description":"Returns the adjustable offset for the cooling set point.",
          "const":"SetPointAdjust.Cooling"
        },
        {
          "description":"Returns the adjustable offset for the heating set point.",
          "const":"SetPointAdjust.Heating"
        },
        {
          "description":"Returns whether the heating and cooling setpoint adjusts are linked.",
          "const":"SetPointAdjust.IsLinked"
        },
        {
          "description":"Returns the maximum number of samples that can be stored in the module for this source before trending starts overriding data or stops sampling (if IsStopWhenFull is true).",
          "const":"TrendSource.BufferSize"
        },
        {
          "description":"Returns the change-of-value increment.",
          "const":"TrendSource.COVIncrement"
        },
        {
          "description":"Returns the number of days that historical trends from this source are kept before they expire (and are deleted).",
          "const":"TrendSource.HistorianExpirationDelay"
        },
        {
          "description":"Returns the number of new samples that will trigger trend historian to collect trends to store in the database.",
          "const":"TrendSource.HistorianTrigger"
        },
        {
          "description":"Returns the time of the latest trend sample stored in the historical database for this source.",
          "const":"TrendSource.LatestSampleTimeInDatabase"
        },
        {
          "description":"Returns the number of historical trend samples stored in the database for this source.",
          "const":"TrendSource.NumberOfSamplesInDatabase"
        },
        {
          "description":"Returns the time of the oldest trend sample stored in the historical database for this source.",
          "const":"TrendSource.OldestSampleTimeInDatabase"
        },
        {
          "description":"Returns the number of milliseconds between samples if the source is using interval trending.",
          "const":"TrendSource.SampleInterval"
        },
        {
          "description":"Returns the system default for the number of days that historical trends are kept before they expire (and are deleted).",
          "const":"TrendSource.SystemDefaultExpirationDays"
        },
        {
          "description":"Returns the type of data that can be trended by this source (Analog, Complex, Digital, or EquipmentColor).",
          "const":"TrendSource.Type"
        },
        {
          "description":"Returns whether the trend is set for change-of-value trending.",
          "const":"TrendSource.IsCOV"
        },
        {
          "description":"Returns whether this trend source is enabled.",
          "const":"TrendSource.IsEnabled"
        },
        {
          "description":"Returns whether trends for this source are to be archived in the trends database.",
          "const":"TrendSource.IsHistorianEnabled"
        },
        {
          "description":"Returns whether the historian expiration days for this trend source is set to the system default.",
          "const":"TrendSource.IsHistorianExpirationSystemDefault"
        },
        {
          "description":"Returns whether the trend is set for interval trending.",
          "const":"TrendSource.IsInterval"
        },
        {
          "description":"Returns whether the module stops trending when the trend buffer gets full, or starts overwriting the oldest samples.",
          "const":"TrendSource.IsStopWhenFull"
        },
        {
          "description":"Returns whether the trend is a 'wire trend.' Wire trends are not COV or interval trends, but are triggered by an input wire.",
          "const":"TrendSource.IsWire"
        },
        {
          "description":"Gets the description of the BACnet object.",
          "type":"string",
          "pattern":"^BACnetObjectSource\\[\\d+\\]\\.Description$",
          "title":"BACnetObjectSource.Description",
          "default":"BACnetObjectSource[0].Description"
        },
        {
          "description":"Gets the BACnet object name.",
          "type":"string",
          "pattern":"^BACnetObjectSource\\[\\d+\\]\\.Name$",
          "title":"BACnetObjectSource.Name",
          "default":"BACnetObjectSource[0].Name"
        },
        {
          "description":"Gets the BACnet object ID.",
          "type":"string",
          "pattern":"^BACnetObjectSource\\[\\d+\\]\\.ObjectID$",
          "title":"BACnetObjectSource.ObjectID",
          "default":"BACnetObjectSource[0].ObjectID"
        },
        {
          "description":"Gets the instance portion of the BACnet object ID.",
          "type":"string",
          "pattern":"^BACnetObjectSource\\[\\d+\\]\\.ObjectInstance$",
          "title":"BACnetObjectSource.ObjectInstance",
          "default":"BACnetObjectSource[0].ObjectInstance"
        },
        {
          "description":"Gets the type number portion of the BACnet object ID.",
          "type":"string",
          "pattern":"^BACnetObjectSource\\[\\d+\\]\\.ObjectTypeNumber$",
          "title":"BACnetObjectSource.ObjectTypeNumber",
          "default":"BACnetObjectSource[0].ObjectTypeNumber"
        },
        {
          "description":"Returns the name of they type as given in the BACnet specification.",
          "type":"string",
          "pattern":"^BACnetObjectSource\\[\\d+\\]\\.Type\\.Name$",
          "title":"BACnetObjectSource.Type.Name",
          "default":"BACnetObjectSource[0].Type.Name"
        },
        {
          "description":"Returns the number assigned to this type by the BACnet specification.",
          "type":"string",
          "pattern":"^BACnetObjectSource\\[\\d+\\]\\.Type\\.Number$",
          "title":"BACnetObjectSource.Type.Number",
          "default":"BACnetObjectSource[0].Type.Number"
        },
        {
          "description":"Returns a short name of they type, typically just a few characters long.",
          "type":"string",
          "pattern":"^BACnetObjectSource\\[\\d+\\]\\.Type\\.ShortName$",
          "title":"BACnetObjectSource.Type.ShortName",
          "default":"BACnetObjectSource[0].Type.ShortName"
        }
      ]
    },
    "dataConst":{
      "anyOf":[
        {
          "title":"DataReference",
          "description":"If 'property' is present, then 'property' is resolved either relative to the current node or the node with the specified 'ID'. If 'property' is unspecified, then 'ID' may refer to a string constant (e.g, initialization parameter).",
          "type":"object",
          "default":{},
          "additionalProperties":false,
          "minProperties":1,
          "properties":{
            "ID":{
              "description":"References the node or string constant with the given ID.",
              "type":"string",
              "default":""
            },
            "property":{
              "$ref":"#/definitions/data"
            },
            "transform":{
              "description":"List of optional regex transforms.",
              "type":"array",
              "minItems":1,
              "additionalItems":false,
              "items":{
                "description":"Optional regex transform used for preprocessing.",
                "type":"object",
                "default":{
                  "find":"^$",
                  "replace":"$1"
                },
                "additionalProperties":false,
                "required":["find", "replace"],
                "properties":{
                  "find":{
                    "description":"Regular expression for matching subsets of the data.",
                    "type":"string",
                    "default":"^$"
                  },
                  "replace":{
                    "description":"Replacements for data matched by the regular expression.",
                    "type":"string",
                    "default":"$1"
                  }
                }
              }
            }
          }
        },
        {
          "title":"StringConstant",
          "description":"A constant string value.",
          "type":"string",
          "default":""
        }
      ]
    },
    "assertion":{
      "title":"Assertion",
      "anyOf":[
        {
          "description":"Compare two values.",
          "type":"object",
          "default":{
            "value1":{},
            "value2":"",
            "operator":"=="
          },
          "additionalProperties":false,
          "required":["value1","value2","operator"],
          "properties":{
            "value1":{
              "$ref":"#/definitions/dataConst"
            },
            "value2":{
              "$ref":"#/definitions/dataConst"
            },
            "operator":{
              "default":"==",
              "enum":[
                "==",
                "!=",
                "<=",
                ">=",
                "<",
                ">"
              ]
            }
          }
        },
        {
          "description":"Validate data using regular expressions.",
          "type":"object",
          "default":{
            "value":{},
            "pattern":"^$"
          },
          "additionalProperties":false,
          "required":["value"],
          "properties":{
            "value":{
              "$ref":"#/definitions/dataConst"
            },
            "pattern":{
              "description":"'value' must match the given regular expression.",
              "type":"string",
              "default":"^true$"
            }
          }
        }
      ]
    },
    "expression":{
      "title":"Expression",
      "description":"List of assertions logically bound by the OR operator.",
      "type":"array",
      "default":[
        {
          "value1":{},
          "value2":"",
          "operator":"=="
        }
      ],
      "minItems":1,
      "uniqueItems":true,
      "additionalItems":false,
      "items":{
        "anyOf":[
          {
            "title":"AssertionList",
            "description":"List of assertions logically bound by the AND operator.",
            "type":"array",
            "default":[],
            "minItems":1,
            "uniqueItems":true,
            "additionalItems":false,
            "items":{
              "$ref":"#/definitions/assertion"
            }
          },
          {
            "$ref":"#/definitions/assertion"
          }
        ]
      }
    },
    "columnData":{
      "description":"Specifies the value of a column.",
      "type":"object",
      "default":{
        "value":{}
      },
      "additionalProperties":false,
      "required":["value"],
      "properties":{
        "value":{
          "$ref":"#/definitions/dataConst"
        },
        "link":{
          "description":"Generates a clickable link over this data.",
          "type":"object",
          "required":["tree"],
          "additionalProperties":false,
          "default":{
            "tree":"GEO",
            "action":"",
            "category":"",
            "instance":"",
            "tab":""
          },
          "properties":{
            "tree":{
              "description":"Specifies the tree to generate a link for (CFG, GEO, GRP, or NET).",
              "default":"GEO",
              "enum":[
                "CFG",
                "GEO",
                "GRP",
                "NET"
              ]
            },
            "ID":{
              "description":"The ID of a node to link to.",
              "type":"string",
              "default":""
            },
            "action":{
              "description":"'Action Button' from the 'whereami' manual command.",
              "type":"string",
              "default":""
            },
            "category":{
              "description":"'Category' from the 'whereami' manual command.",
              "type":"string",
              "default":""
            },
            "instance":{
              "description":"'Instance' from the 'whereami' manual command.",
              "type":"string",
              "default":""
            },
            "tab":{
              "description":"'Tab' from the 'whereami' manual command.",
              "type":"string",
              "default":""
            }
          }
        },
        "validators":{
          "description":"All of the following data validators should be satisfied.",
          "type":"array",
          "default":[
            {
              "expression":[
                {
                  "value1":{},
                  "value2":"",
                  "operator":"=="
                }
              ],
              "message":"",
              "suggestion":""
            }
          ],
          "minItems":1,
          "uniqueItems":true,
          "additionalItems":false,
          "items":{
            "description":"Validates data.",
            "type":"object",
            "default":{
              "expression":[
                {
                  "value1":{},
                  "value2":"",
                  "operator":"=="
                }
              ],
              "message":"",
              "suggestion":""
            },
            "additionalProperties":false,
            "required":["expression"],
            "properties":{
              "expression":{
                "$ref":"#/definitions/expression"
              },
              "message":{
                "description":"If validation fails, this message is shown to the user.",
                "type":"string",
                "default":""
              },
              "suggestion":{
                "$ref":"#/definitions/dataConst"
              }
            }
          }
        }
      }
    },
    "nodeMatcher":{
      "title":"Matcher",
      "description":"Matches nodes on WebCTRL trees.",
      "type":"object",
      "additionalProperties":false,
      "minProperties":1,
      "default":{},
      "properties":{
        "jumpID":{
          "description":"Jump to the node assigned the given ID before evaluating match conditions. To prevent infinite loops, jumps are restricted to descendents.",
          "type":"string",
          "default":""
        },
        "jumpTree":{
          "description":"Jump to another tree before evaluating match conditions. By default, all matchers start at the root of the geographic tree.",
          "default":"Geographic",
          "enum":[
            "Geographic",
            "Network"
          ]
        },
        "ID":{
          "description":"Used to reference matched nodes.",
          "type":"string",
          "default":""
        },
        "expression":{
          "$ref":"#/definitions/expression"
        },
        "minDepth":{
          "description":"Minimum depth of match.",
          "type":"number",
          "minimum":0,
          "default":1
        },
        "maxDepth":{
          "description":"Maximum depth of match. 0 implies there is no maximum.",
          "type":"number",
          "minimum":0,
          "default":1
        },
        "matchFlag":{
          "description":"Flag which may affect match semantics.",
          "default":"ALL",
          "enum":["ALL", "GREEDY", "RELUCTANT", "POSSESIVE"]
        },
        "next":{
          "description":"Each matcher listed here is tested against every matched node.",
          "type":"array",
          "default":[
            {}
          ],
          "uniqueItems":true,
          "minItems":1,
          "additionalItems":false,
          "items":{
            "$ref":"#/definitions/nodeMatcher"
          }
        },
        "data":{
          "$ref":"#/definitions/columnData"
        },
        "hideWhenValid":{
          "description":"Whether to hide this row when all columns are validated.",
          "type":"boolean",
          "default":false
        },
        "columns":{
          "description":"Defines a list of columns for each node validated by this matcher.",
          "type":"array",
          "default":[
            {
              "name":""
            }
          ],
          "minItems":1,
          "uniqueItems":true,
          "additionalItems":false,
          "items":{
            "type":"object",
            "default":{},
            "minProperties":1,
            "additionalProperties":false,
            "required":["name", "data"],
            "properties":{
              "name":{
                "description":"The name of this column.",
                "type":"string",
                "default":""
              },
              "hidden":{
                "description":"Specifies whether this column should be hidden.",
                "type":"boolean",
                "default":false
              },
              "data":{
                "anyOf":[
                  {
                    "$ref":"#/definitions/columnData"
                  },
                  {
                    "description":"The first node found by this array of matchers is used to populate the value of this column.",
                    "type":"array",
                    "default":[
                      {}
                    ],
                    "uniqueItems":true,
                    "minItems":1,
                    "additionalItems":false,
                    "items":{
                      "$ref":"#/definitions/nodeMatcher"
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "params":{
      "description":"Initialization parameters provided by the user.",
      "type":"array",
      "additionalItems":false,
      "minItems":1,
      "uniqueItems":true,
      "default":[
        {}
      ],
      "items":{
        "description":"Initialization parameter provided by the user.",
        "type":"object",
        "additionalProperties":false,
        "required":["ID", "name", "type"],
        "properties":{
          "ID":{
            "description":"ID of this parameter (may be referenced in expressions).",
            "type":"string",
            "default":""
          },
          "name":{
            "description":"Name of this parameter to use when in prompts to the user.",
            "type":"string",
            "default":""
          },
          "type":{
            "description":"The type of input for this parameter. Boolean inputs are shown to the user as a checkbox.",
            "default":"string",
            "enum":[
              "string",
              "boolean"
            ]
          },
          "default":{
            "description":"The default input for this parameter.",
            "type":"string",
            "default":""
          },
          "pattern":{
            "description":"Regular expression to validate the user's input for this parameter.",
            "type":"string",
            "default":"^$"
          },
          "message":{
            "description":"If regex validation fails, this message is shown to the user.",
            "type":"string",
            "default":""
          }
        }
      }
    }
  },
  "description":"Root schema for node report definitions.",
  "type":"object",
  "additionalProperties":false,
  "required":["sections"],
  "properties":{
    "$schema":{
      "description":"Location of the validation schema for this document.",
      "type":"string",
      "default":""
    },
    "hideWhenValid":{
      "description":"The default selection for whether to hide all valid rows.",
      "type":"boolean",
      "default":false
    },
    "params":{
      "$ref":"#/definitions/params"
    },
    "sections":{
      "description":"List of sections for the user to choose from.",
      "type":"array",
      "additionalItems":false,
      "minItems":1,
      "uniqueItems":true,
      "default":[
        {}
      ],
      "items":{
        "description":"Defines a single section.",
        "type":"object",
        "additionalProperties":false,
        "required":["name", "matchers"],
        "properties":{
          "name":{
            "description":"The name for this section.",
            "type":"string",
            "default":""
          },
          "params":{
            "$ref":"#/definitions/params"
          },
          "matchers":{
            "description":"List of node matchers used to define the tables in this section.",
            "type":"array",
            "additionalItems":false,
            "minItems":1,
            "uniqueItems":true,
            "default":[
              {}
            ],
            "items":{
              "$ref":"#/definitions/nodeMatcher"
            }
          }
        }
      }
    }
  }
}